package org.ojim.client.gui;

import java.io.File;
import javax.swing.JTextArea;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.runner.FailureDetailView;
import junit.swingui.TestRunner;

//import soup.framework.RobotHome;

public class GUITest extends TestCase {
	
	// Folgendes ist von der Offiziellen JUnit Seite!
	//RobotHome robotHome;
	JTextArea failureDetailTextArea;
	TestRunner testRunner;

	public GUITest(String arg0) {
		super(arg0);
	}

	protected void setUp() throws Exception {
		super.setUp();
		//Initialize the variable used by the generated test code.
		//robotHome = RobotHome.getInstance();

		// JUnit keeps a history of the test ran in a file.
		// It fills the test class name field with the
		// last run test. This could make this test case
		// execution nonderteministic, which is highly 
		// inapropriate for our tests.
		String home = System.getProperty("user.home");
 		File historyFile = new File(home,".junitsession");
 		historyFile.delete();

		// The only way to have access to the 
		// failure detail text area is by intercepting
		// its creation.
		testRunner = new TestRunner(){
			// We sub class the method that creates the TextArea.
			protected FailureDetailView createFailureDetailView(){
				// call the method that actually creates the component.
				FailureDetailView view = super.createFailureDetailView();
				// we save the reference in a variable accessible 
				// to our test case.
				failureDetailTextArea = (JTextArea) view.getComponent();
				// return the result of the super method.
				return view;
				
			}
		};
		
		// Number 1 in the requirements list, 
		// here I show the screen. 
		testRunner.start(new String[] {});
	}

	protected void tearDown() throws Exception {
		super.tearDown();
		testRunner = null;
		//robotHome = null;
	}
	public void testJUnitGUI(){
		// Begin of source generated by soup
		/*
		robotHome.getRobot().mouseMove(241,289);
		robotHome.getRobot().mousePress(16);
		robotHome.getRobot().mouseRelease(16);
		robotHome.getRobot().keyPress(16);
		robotHome.getRobot().keyPress(77);
		robotHome.getRobot().keyRelease(77);
		robotHome.getRobot().keyRelease(16);
		robotHome.getRobot().keyPress(89);
		robotHome.getRobot().keyRelease(89);
		robotHome.getRobot().keyPress(16);
		robotHome.getRobot().keyPress(84);
		robotHome.getRobot().keyRelease(84);
		robotHome.getRobot().keyRelease(16);
		robotHome.getRobot().keyPress(69);
		robotHome.getRobot().keyRelease(69);
		robotHome.getRobot().keyPress(83);
		robotHome.getRobot().keyRelease(83);
		robotHome.getRobot().keyPress(84);
		robotHome.getRobot().keyRelease(84);
		robotHome.getRobot().mouseMove(646,285);
		robotHome.getRobot().mousePress(16);
		robotHome.getRobot().mouseRelease(16);
		robotHome.getRobot().mouseMove(436,422);
		robotHome.getRobot().mousePress(16);
		robotHome.getRobot().mouseRelease(16);
		robotHome.getRobot().mouseMove(217,231);
		*/
		// End of code generated by soup
				
		//Check that the fail message starts with 
		// the name of the exception thrown is enough. 
		// for now, we don't need to check the stack. 
		String expectedFailureMessage = "java.lang.UnsupportedOperationException: failure.";
		String failMessage = failureDetailTextArea.getText();
		assertTrue(failMessage.startsWith(expectedFailureMessage));


	}
    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }
    public static Test suite() {
        return new TestSuite(GUITest.class);
    }
}
